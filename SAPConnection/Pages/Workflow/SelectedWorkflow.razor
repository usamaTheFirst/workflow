@page "/selected-workflow/{selkey}"

@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore;

@using SAPConnection.Data;
@using SAPConnection.Data.Services;

@inject WorkFlowService workflowService
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationUser cau
@using System.Text
@using System.Text.Json
@inject IHttpContextAccessor httpContextAccessor

@inject IToastService toastService
@inject StaticApproverService staticApproverService

<CascadingAuthenticationState>
    <AuthorizeView>

        <NotAuthorized>
            @{
                <RedirectTo></RedirectTo>

            }
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@if (wfs == null)
{
    <div class="container-fluid">
        <div class="spinner-border" role="status">
        </div>
    </div>
}
else if (wfs.Count == 0)
{
    <p><em>No Workflows found.</em></p>
}
else
{
    <h1>Workflows</h1>
    @if(!Edit)
    {
        <div class="container-fluid" style="text-align:right; display:inline-block;">
            <a class="btn mybtn" @onclick="()=> EditWF()">
                <svg width="24" stroke-width="1.5" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M20 12V5.74853C20 5.5894 19.9368 5.43679 19.8243 5.32426L16.6757 2.17574C16.5632 2.06321 16.4106 2 16.2515 2H4.6C4.26863 2 4 2.26863 4 2.6V21.4C4 21.7314 4.26863 22 4.6 22H11" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" /> <path d="M8 10H16M8 6H12M8 14H11" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" /> <path d="M16 5.4V2.35355C16 2.15829 16.1583 2 16.3536 2C16.4473 2 16.5372 2.03725 16.6036 2.10355L19.8964 5.39645C19.9628 5.46275 20 5.55268 20 5.64645C20 5.84171 19.8417 6 19.6464 6H16.6C16.2686 6 16 5.73137 16 5.4Z" fill="currentColor" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" /> <path d="M17.9541 16.9394L18.9541 15.9394C19.392 15.5015 20.102 15.5015 20.5399 15.9394V15.9394C20.9778 16.3773 20.9778 17.0873 20.5399 17.5252L19.5399 18.5252M17.9541 16.9394L14.963 19.9305C14.8131 20.0804 14.7147 20.2741 14.6821 20.4835L14.4394 22.0399L15.9957 21.7973C16.2052 21.7646 16.3988 21.6662 16.5487 21.5163L19.5399 18.5252M17.9541 16.9394L19.5399 18.5252" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" /> </svg>
                Edit
            </a>
        </div>

        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Key</th>
                        <th>Assigned Task</th>
                        <th>Level</th>
                        <th>Approver Role</th>
                        <th>App</th>

                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @{i = 0;}
                    @foreach (var wf in wfs)
                    {
                        
                        <tr>

                            <td>@wf.Id</td>
                            <td>@wf.Key</td>
                            <td>@wf.AssignedTask</td>
                            <td>@wf.Level</td>
                            @if (@roles[i] == "ByRole")
                            {
                                <td>@wf.ApproverRole</td>
                            }
                            else
                            {
                                <td>@roles[i]</td>
                            }
                            @{i++;}
                            <td>@wf.App</td>

                            <td>
                                <div class="btn mybtn" @onclick="()=> DelWF(wf)">

                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                        <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5Zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5Zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6Z" />
                                        <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1ZM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118ZM2.5 3h11V2h-11v1Z" />
                                    </svg>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="container-fluid" style="text-align:right; display:inline-block;">
            <a class="btn mybtn" @onclick="()=> AddNewLevel()">
                <svg enable-background="new 0 0 50 50" height="24" id="Layer_1" version="1.1" viewBox="0 0 50 50" width="24" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><rect fill="none" height="50" width="50" /><line fill="none" stroke="currentColor" stroke-miterlimit="10" stroke-width="4" x1="9" x2="41" y1="25" y2="25" /><line fill="none" stroke="currentColor" stroke-miterlimit="10" stroke-width="4" x1="25" x2="25" y1="9" y2="41" /></svg>
            </a>

            <a class="btn mybtn" @onclick="()=> UpdateWFs()">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-save-fill" viewBox="0 0 16 16"> <path d="M8.5 1.5A1.5 1.5 0 0 1 10 0h4a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h6c-.314.418-.5.937-.5 1.5v7.793L4.854 6.646a.5.5 0 1 0-.708.708l3.5 3.5a.5.5 0 0 0 .708 0l3.5-3.5a.5.5 0 0 0-.708-.708L8.5 9.293V1.5z" /> </svg>
                Save
            </a>
        </div>

        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Key</th>
                        <th>Assigned Task</th>
                        <th>Level</th>
                        <th>Approver Type</th>
                        <th>Approver Role</th>
                        <th>App</th>

                        <th></th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (var wf in wfs)
                    {
                        <tr>

                            <td>@wf.Id</td>
                            <td style="width:400px;">
                                <input type="text" @bind="@wf.Key" class="form-control" @oninput="ChangeKey"/>
                            </td>
                            <td>
                                <select @bind="@wf.AssignedTask" class="form-control">
                                    <option value="@AssignedTask.Review">Review</option>
                                    <option value="@AssignedTask.Approve">Approve</option>
                                    @if(wf.App == "po")
                                    {
                                        <option value="@AssignedTask.Payment">Payment</option>
                                    }
                                </select>
                            </td>
                            <td style="width:80px;">
                                <input type="number" @bind-value="@wf.Level" class="form-control" />
                            </td>

                            <td>
                                <select class="form-control form-control" @bind="@wf.ApproverType">
                                    <option value="@ApproverType.ByUser">By User</option>
                                    <option value="@ApproverType.ByRole">By Role</option>
                                </select>
                            </td>

                            @if (wf.ApproverType == null)
                            {
                                <td></td>
                            }
                            else if (wf.ApproverType == ApproverType.ByRole)
                            {
                                <td>

                                    <select @bind="@wf.ApproverRole" class="form-control form-control">
                                        <option selected style="display:none;"></option>
                                        <option value="@ApproverRole.SectionHead">Section Head</option>
                                        <option value="@ApproverRole.UnitManager">Unit Manager</option>
                                        <option value="@ApproverRole.DepartmentHead">Department Head</option>
                                        <option value="@ApproverRole.FunctionalHead">Functional Head</option>
                                    </select>
                                </td>
                            }
                            else if (wf.ApproverType == ApproverType.ByUser)
                            {
                                <td>

                                    <select @bind="@wf.StaticApproverRole" class="form-control form-control">
                                        <option selected style="display:none;"></option>
                                        @foreach (var r in All_Static_Approvers)
                                        {
                                            <option value="@r.RoleId">@r.Role</option>
                                        }
                                    </select>
                                </td>
                            }

                            <td>
                                <select value="@wf.App" class="form-control" @onchange="ChangeApp">
                                    <option value="leave">Leave</option>
                                    <option value="po">Payment Order</option>
                                    <option value="timeEvents">Attendance Regularization</option>
                                    <option value="visitReg">Visit Regularization</option>
                                </select>
                            </td>

                            @*<td>
                <a class="btn mybtn" href="@($"/view-wf/{wf.Id}")">

                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z" />
                <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8zm8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7z" />
                </svg> View
                </a>
                </td>*@
                        </tr>
                    }
                </tbody>
            </table>
        </div>

    }

    
}

@code {
    [Parameter]
    public string selkey{ set; get; }
    public bool Edit{ set; get; } = false;
    List<WorkflowItem> wfs;
    ApplicationUser AppUser;
    WorkflowItem newWF,tempWF;
    List<string> roles = new List<string>();
    string role;
    int i;
    List<StaticApproversModel> All_Static_Approvers = new List<StaticApproversModel>();
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            if (httpContextAccessor.HttpContext.Session.TryGetValue("UserData", out var userDataBytes))
            {
                var userDataJson = Encoding.UTF8.GetString(userDataBytes);
                AppUser = JsonSerializer.Deserialize<ApplicationUser>(userDataJson);
                if (!string.IsNullOrEmpty(selkey))
                {
                    wfs = await workflowService.GetSelectedWorkflowsAsync(selkey);
                    tempWF = wfs[0];
                    foreach (var wflow in wfs)
                    {
                        if (wflow.ApproverType == ApproverType.ByUser)
                        {
                            var r = await staticApproverService.GetRoleByRoleId(wflow.StaticApproverRole);
                            roles.Add(r[0]);
                        }
                        else
                        {
                            roles.Add("ByRole");
                        }
                    }
                }
            }
        }
    }

    public async Task EditWF()
    {
        All_Static_Approvers = await staticApproverService.GetAllStaticApproverRolesAsync();
        Edit = true;
    }

    public async Task UpdateWFs()
    {
        bool valid = true;
        foreach(var w in wfs)
        {
            if (w.ApproverType == ApproverType.ByRole)
            {
                w.StaticApproverRole = null;
                if(w.ApproverRole == null)
                {
                    valid = false;
                }
            }
            else if (w.ApproverType == ApproverType.ByUser)
            {
                w.ApproverRole = null;
                if (w.StaticApproverRole == null)
                {
                    valid = false;
                }
            }
            else if(w.ApproverType == null)
            {
                valid = false;
            }
        }
        if (string.IsNullOrEmpty(wfs[0].Key))
        {
            valid = false;
            toastService.ShowError("Please Fill Complete Form!");
        }
        else if(valid)
        {
            int i = 1;
            Edit = false;
            foreach (var wf in wfs)
            {
                wf.Level = i;
                if(wf.Key != tempWF.Key)
                {
                    wf.Location = null;
                    wf.SubType = null;
                    wf.WF_Type = null;
                    wf.specific_id = null;
                }
                await workflowService.UpdateWorkflowAsync(wf);
                i++;
            }
            if (!string.IsNullOrEmpty(selkey))
            {
                wfs = await workflowService.GetSelectedWorkflowsAsync(selkey);
            }
            //updating roles
            roles.Clear();
            foreach (var wflow in wfs)
            {
                if (wflow.ApproverType == ApproverType.ByUser)
                {
                    var r = await staticApproverService.GetRoleByRoleId(wflow.StaticApproverRole);
                    roles.Add(r[0]);
                }
                else
                {
                    roles.Add("ByRole");
                }
            }
        }
        else
        {
            toastService.ShowError("Please Fill Complete Form!");
        }
    }

    public void ChangeApp(ChangeEventArgs e)
    {
        foreach(var wf in wfs)
        {
            wf.App = e.Value.ToString();
        }
    }

    public void ChangeKey(ChangeEventArgs e)
    {
        foreach (var wf in wfs)
        {
            wf.Key = e.Value.ToString();
        }
    }

    private async Task DelWF(WorkflowItem wf)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this workflow level?" }))
        {
            await workflowService.DeleteWorkFlowByIDAsync(wf.Id);
            if (!string.IsNullOrEmpty(selkey))
            {
                wfs = await workflowService.GetSelectedWorkflowsAsync(selkey);
            }
            if(wfs.Count > 0)
            {
                await UpdateWFs();
            }
        }
    }
    private async Task AddNewLevel()
    {
        newWF = new WorkflowItem();
        newWF.Key = tempWF.Key;
        newWF.AssignedTask = tempWF.AssignedTask;
        newWF.Level = tempWF.Level;
        newWF.App = tempWF.App;
        newWF.Location = tempWF.Location;
        newWF.SubType = tempWF.SubType;
        newWF.WF_Type = tempWF.WF_Type;
        newWF.specific_id = tempWF.specific_id;
        newWF.ApproverType = tempWF.ApproverType;
        newWF.StaticApproverRole = tempWF.StaticApproverRole;
        newWF.ApproverRole = tempWF.ApproverRole;
        newWF.Id = 0;
        await workflowService.CreateWorkFlow(newWF);
        wfs.Add(newWF);
        //updating roles
        roles.Clear();
        foreach (var wflow in wfs)
        {
            if (wflow.ApproverType == ApproverType.ByUser)
            {
                var r = await staticApproverService.GetRoleByRoleId(wflow.StaticApproverRole);
                roles.Add(r[0]);
            }
            else
            {
                roles.Add("ByRole");
            }
        }
    }
    //private async Task<string> FetchRoles(int? rid)
    //{
    //    roles = await staticApproverService.GetRoleByRoleId(rid);
    //    role = roles[0].ToString();
    //    return role;
    //}
}
